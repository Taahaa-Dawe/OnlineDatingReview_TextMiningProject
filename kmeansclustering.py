# -*- coding: utf-8 -*-
"""KmeansClustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VAK9LW6WteYhS0gX0kYPSgRBhZ90jCWc

# Clustering
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from nltk.stem import WordNetLemmatizer
from nltk.stem.porter import PorterStemmer
import re
import nltk
nltk.download('wordnet')

data = pd.read_csv("/content/DataText.csv")

data.head()

data.sample(n=100)["label"].unique()

data.head(50)

data_news = data.iloc[0:25]
data_buzz= data.iloc[25:40]
data_reddit = data.iloc[40:]

sampled_data = pd.concat([data_news, data_buzz,data_reddit.sample(n=60)])

sampled_data[["label","description"]].head(10)

Text = data[["description"]]

Text.head()

LEMMER = WordNetLemmatizer()

def MY_LEMMER(str_input):
    words = re.sub(r"[^A-Za-z\-]", " ", str_input).lower().split()
    words = [LEMMER.lemmatize(word) for word in words]
    return words

MyVect_LEM=TfidfVectorizer(input='content',
                        analyzer = 'word',
                        stop_words='english',
                        tokenizer=MY_LEMMER,
                        lowercase = True,
                        max_features= 100
                        )

Vect_LEM = MyVect_LEM.fit_transform(sampled_data["description"].str.lower().tolist())
ColumnNames_lem=MyVect_LEM.get_feature_names_out()
CorpusDF_LEM=pd.DataFrame(Vect_LEM.toarray(),columns=ColumnNames_lem)
CorpusDF_LEM

for i in CorpusDF_LEM.columns:
    if i == "bf":
        CorpusDF_LEM.rename({"bf":"boyfriend"})
        print("Changed")
    elif len(i) <3:
        CorpusDF_LEM.drop(i, inplace=True, axis= 1)

for i in CorpusDF_LEM.columns:
    print(i)

CorpusDF_LEM.head(10)

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import numpy as np
from scipy.spatial import distance_matrix

from sklearn.metrics import confusion_matrix
from sklearn import metrics
from sklearn.metrics import silhouette_score
from sklearn.datasets import make_blobs
import matplotlib.cm as cm
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
from sklearn.metrics import silhouette_samples, silhouette_score

CorpusDF_LEM.rename(columns={"don":"do not"},inplace=True)

k = 2

# Apply K-means clustering
kmeans = KMeans(n_clusters=k, algorithm= "lloyd",n_init='auto',max_iter =  2000)
CorpusDF_LEM['cluster'] = kmeans.fit_predict(CorpusDF_LEM)


#cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
#cluster_labels = kmeans.labels_

silhouette_score(CorpusDF_LEM, CorpusDF_LEM['cluster'])

CorpusDF_LEM[CorpusDF_LEM['cluster']==1]

CorpusDF_LEM[CorpusDF_LEM['cluster']==0]

DataCopy = CorpusDF_LEM[CorpusDF_LEM['cluster']==1].copy()
DataCopy.drop(["cluster"], axis=1,inplace=True)
SumofData = DataCopy.sum(axis=0)

import matplotlib.pyplot as plt
from wordcloud import WordCloud

word_cloud = WordCloud(collocations = False, background_color = 'white').generate_from_frequencies(SumofData)

WC1=WordCloud(width=1000, height=600, background_color="white",
               min_word_length=4, #mask=next_image,
               max_words=200).generate_from_frequencies(SumofData)

plt.imshow(WC1, interpolation='bilinear')
plt.axis("off")
plt.show()

DataCopy = CorpusDF_LEM[CorpusDF_LEM['cluster']==0].copy()

SumofData = DataCopy.sum(axis=0)

import matplotlib.pyplot as plt
from wordcloud import WordCloud

word_cloud = WordCloud(collocations = False, background_color = 'white').generate_from_frequencies(SumofData)

WC1=WordCloud(width=1000, height=600, background_color="white",
               min_word_length=4, #mask=next_image,
               max_words=200).generate_from_frequencies(SumofData)

plt.imshow(WC1, interpolation='bilinear')
plt.axis("off")
plt.show()

CorpusDF_LEM.to_csv("DataProceesed.csv")

wcss =[]
for i in range(1, 6):
    kmeans = KMeans(n_clusters = i, n_init='auto', random_state = 42)
    kmeans.fit(CorpusDF_LEM)
    wcss.append(kmeans.inertia_)

plt.plot(range(1, 6), wcss)
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.title("Using Elbow Method")
plt.show()

df =

dataset = CorpusDF_LEM
df = pd.DataFrame(distance_matrix(dataset.values, dataset.values), index=dataset.index, columns=dataset.index)

df

import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

# Assuming df is already defined
mask = np.tril(np.ones(df.shape), k=0).astype(bool)
df = df.where(mask)

newd = df.iloc[1:10,1:10]
#newd = newd.append(df.iloc[80:85, 0:5])
sns.heatmap(newd, cmap="YlGnBu", annot=True, fmt=".2f", linewidths=.5)
plt.title('Clustering Distance Matrix')
plt.show()

data_scaled = CorpusDF_LEM

data1 = CorpusDF_LEM

Silhouette_Score =[]

# Commented out IPython magic to ensure Python compatibility.
for n_clusters in range(2,7):
    # Create a subplot with 1 row and 2 columns
    fig, (ax1, ax2) = plt.subplots(1, 2)
    fig.set_size_inches(18, 7)

    # The 1st subplot is the silhouette plot
    # The silhouette coefficient can range from -1, 1 but in this example all
    # lie within [-0.1, 1]
    ax1.set_xlim([-0.1, 1])
    # The (n_clusters+1)*10 is for inserting blank space between silhouette
    # plots of individual clusters, to demarcate them clearly.
    ax1.set_ylim([0, len(data_scaled) + (n_clusters + 1) * 10])

    # Initialize the clusterer with n_clusters value and a random generator
    # seed of 10 for reproducibility.
    clusterer = KMeans(n_clusters=n_clusters,n_init='auto')
    cluster_labels = clusterer.fit_predict(data_scaled)

    # The silhouette_score gives the average value for all the samples.
    # This gives a perspective into the density and separation of the formed
    # clusters
    silhouette_avg = silhouette_score(data_scaled, cluster_labels)
    print(
        "For n_clusters =",
        n_clusters,
        "The average silhouette_score is :",
        silhouette_avg,
    )
    Silhouette_Score.append(silhouette_avg)

    # Compute the silhouette scores for each sample
    sample_silhouette_values = silhouette_samples(data_scaled, cluster_labels)

    y_lower = 10
    for i in range(n_clusters):
        # Aggregate the silhouette scores for samples belonging to
        # cluster i, and sort them
        ith_cluster_silhouette_values = sample_silhouette_values[cluster_labels == i]

        ith_cluster_silhouette_values.sort()

        size_cluster_i = ith_cluster_silhouette_values.shape[0]
        y_upper = y_lower + size_cluster_i

        color = cm.nipy_spectral(float(i) / n_clusters)
        ax1.fill_betweenx(
            np.arange(y_lower, y_upper),
            0,
            ith_cluster_silhouette_values,
            facecolor=color,
            edgecolor=color,
            alpha=0.7,
        )

        # Label the silhouette plots with their cluster numbers at the middle
        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))

        # Compute the new y_lower for next plot
        y_lower = y_upper + 10  # 10 for the 0 samples

    ax1.set_title("The silhouette plot for the various clusters.")
    ax1.set_xlabel("The silhouette coefficient values")
    ax1.set_ylabel("Cluster label")

    # The vertical line for average silhouette score of all the values
    ax1.axvline(x=silhouette_avg, color="red", linestyle="--")

    ax1.set_yticks([])  # Clear the yaxis labels / ticks
    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])

    # 2nd Plot showing the actual clusters formed
    colors = cm.nipy_spectral(cluster_labels.astype(float) / n_clusters)
    #ax2.scatter(
       # data_scaled[:, 1], data_scaled[:, 3], c=cluster_labels
    #)

    # Labeling the clusters
    centers = clusterer.cluster_centers_
    # Draw white circles at cluster centers
    ax2.scatter(
        centers[:, 0],
        centers[:, 1],
        marker="o",
        c="white",
        alpha=1,
        s=200,
        edgecolor="k",
    )

    for i, c in enumerate(centers):
        ax2.scatter(c[0], c[1], marker="$%d$" % i, alpha=1, s=50, edgecolor="k")

    ax2.set_title("The visualization of the clustered data.")
    ax2.set_xlabel("Feature space for the 1st feature")
    ax2.set_ylabel("Feature space for the 2nd feature")

    #plt.suptitle(
        #"Silhouette analysis for KMeans clustering on sample data with n_clusters = %d"
#         % n_clusters,
     #   fontsize=14,
      #  fontweight="bold",
    #)

plt.show()

plt.plot([2,3,4,5,6], Silhouette_Score)
plt.title("Using Silhouette Score")